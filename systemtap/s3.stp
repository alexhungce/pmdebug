/*
 * Copyright (C) 2011 Canonical
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 */
global tasks_frozen
global tasks_thawed
global tasks_frozen_names

global funcs_entered
global funcs_returned

global saved_device_name
global saved_device_driver_name

global devices_suspended
global devices_resumed

global reboot_funcname
global ledflash_funcname
global beep_funcname
global parent_pid
global minimodem 
global baud

/*
 *  TODO:  check time we spent in suspend, to see if we don't get S3 bouncing
 */

%{
#include <linux/device.h>
#include <linux/delay.h>
#include <linux/rtc.h>
#include <linux/timex.h>
#include <linux/pm.h>
#include <asm/siginfo.h>
#include <asm/rtc.h>
#include <asm/io.h>

/* for minimodem */
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/delay.h>
#include <asm/io.h>
#if defined(CONFIG_MIPS) || defined(CONFIG_X86)
/* Use the global PIT lock ! */
# include <asm/i8253.h>
#else
# include <asm/8253pit.h>
static DEFINE_RAW_SPINLOCK(i8253_lock);
#endif

/* Bell 101 (110 baud) binary AFSK frequencies */
#define BELL101_BFSK_BAUD		110
#define	BELL101_BFSK_MARK		1270
#define BELL101_BFSK_SPACE		1070

/* Bell 103 (300 baud) binary AFSK frequencies */
#define BELL103_BFSK_BAUD		300
#define	BELL103_BFSK_MARK		1270
#define BELL103_BFSK_SPACE		1070

/* Bell ??? (600 baud) binary AFSK frequencies */
#define BELLxxx_BFSK_BAUD		600
#define	BELLxxx_BFSK_MARK		1270
#define BELLxxx_BFSK_SPACE		1070

/* Bell 202 (1200 baud) binary AFSK frequencies */
#define BELL202_BFSK_BAUD		1200
#define	BELL202_BFSK_MARK		1200
#define BELL202_BFSK_SPACE		2200

#define PCSP_MODEM_DEFAULT_BFSK_STOPBITSX10	10


/* Defaults */
static int bfsk_baud		= BELL101_BFSK_BAUD;
static int bfsk_mark		= BELL101_BFSK_MARK;
static int bfsk_space		= BELL101_BFSK_SPACE;
static int bfsk_stopbitsX10	= PCSP_MODEM_DEFAULT_BFSK_STOPBITSX10;

void pcspkr_baud(unsigned long baud)
{
	switch (baud) {
	case 1200:
		bfsk_baud = BELL202_BFSK_BAUD;
		bfsk_mark = BELL202_BFSK_MARK;
		bfsk_space = BELL202_BFSK_SPACE;		
		break;
	case 600:
		bfsk_baud = BELLxxx_BFSK_BAUD;
		bfsk_mark = BELLxxx_BFSK_MARK;
		bfsk_space = BELLxxx_BFSK_SPACE;		
		break;
	case 300:
		bfsk_baud = BELL103_BFSK_BAUD;
		bfsk_mark = BELL103_BFSK_MARK;
		bfsk_space = BELL103_BFSK_SPACE;		
		break;
	case 110:
	default:
		bfsk_baud = BELL101_BFSK_BAUD;
		bfsk_mark = BELL101_BFSK_MARK;
		bfsk_space = BELL101_BFSK_SPACE;		
		break;
	}
}

void pcspkr_tone(unsigned long frequency)
{
	static unsigned int pcspkr_current_frequency;
	unsigned char val;

	if (frequency != pcspkr_current_frequency) {
		if (pcspkr_current_frequency == 0)
                	outb_p(0xb6, 0x43); /* Ctr 2, squarewave, binary */

		if (frequency > 20 && frequency < 32767) {
			unsigned int count = (PIT_TICK_RATE + frequency/2) / frequency;
			/* write count to select desired tone frequency */
			outb_p(count & 0xff, 0x42);
			outb_p((count >> 8) & 0xff, 0x42);
			val = inb_p(0x61) | 0x03;	/* on */
		} else
			val = inb_p(0x61) & 0xfc;	/* off */

		outb_p(val, 0x61);
		pcspkr_current_frequency = frequency;
	}
}

void pcspkr_delay_nsec(unsigned long duration_nsec)
{
	if (duration_nsec > 1000) {
		unsigned long duration_usec = duration_nsec / 1000;
		if (duration_usec > 1000) {
			unsigned long duration_msec = duration_usec / 1000;
			if (duration_msec) {	
				mdelay(duration_msec);
				duration_usec -= duration_msec * 1000;
				duration_nsec -= duration_msec * 1000000;
			}
		}
		if (duration_usec) {
			udelay(duration_usec);
			duration_nsec -= duration_usec * 1000;
		}
	}
	if (duration_nsec)
		ndelay(duration_nsec);
}

void pcspkr_tone_nsec(unsigned long frequency, unsigned long duration_nsec)
{
    	pcspkr_tone(frequency);
    	pcspkr_delay_nsec(duration_nsec);
}

void pcspkr_generate_bfsk(const char *str)
{
	unsigned long flags;
	unsigned long nsec = (1000000000 + bfsk_baud/2) / bfsk_baud;

	pcspkr_tone_nsec(bfsk_mark, 500*1000*1000);	/* 500ms leader tone */

	while (*str) {
		int i;
		unsigned char c = *str++;

		raw_spin_lock_irqsave(&i8253_lock, flags);

		/*
        	 * generate 8-bit ASCII framing pattern:
		 *	1.0 start bit (bfsk_space)
		 *	8.0 data bits (1==bfsk_mark, lsb first)
		 *	m.n stop bits (bfsk_mark)
		 */
		pcspkr_tone_nsec(bfsk_space, nsec);
		for (i=0; i<8; i++)
			pcspkr_tone_nsec((c & (1<<i)) ? bfsk_mark : bfsk_space, nsec);
		pcspkr_tone_nsec(bfsk_mark, bfsk_stopbitsX10 * nsec / 10);

		raw_spin_unlock_irqrestore(&i8253_lock, flags);
		mdelay(1);
    	}
	pcspkr_tone(0);
}

#define RTC_HASH_MAX 16127999

void save_hash_in_RTC(unsigned long hash)
{
        static struct rtc_time time = {
                .tm_sec = 0,
                .tm_min = 0,
                .tm_hour = 0,
                .tm_mday = 7,
                .tm_mon = 5,
                .tm_year = 106,
                .tm_wday = 3,
                .tm_yday = 160,
                .tm_isdst = 1
        };

	hash %= RTC_HASH_MAX;

        time.tm_year = (hash % 100);
        hash /= 100;
        time.tm_mon = (hash % 12);
        hash /= 12;
        time.tm_mday = (hash % 28) + 1;
        hash /= 28;
        time.tm_hour = (hash % 24);
        hash /= 24;
        time.tm_min = (hash % 20) * 3;
        hash /= 20;

        set_rtc_time(&time);
}

%}

function set_baud(baud: long) %{
	pcspkr_baud(THIS->baud);
%}

function handle_args() {
	parent_pid = strtol(@1, 10)
	reboot_funcname = @2
	ledflash_funcname = @3
	beep_funcname = @4
	minimodem = strtol(@5, 10)
	baud = strtol(@6, 10)

	set_baud(baud)
}

function signal_proc:long(this_pid: long)
%{
	pid_t this_pid = (pid_t)THIS->this_pid;	
	struct pid *pid = find_vpid(this_pid);
	if (pid) {
		kill_pid(pid, SIGUSR1, 1);
		THIS->__retvalue = 0;
	} else 
		THIS->__retvalue = -1;
%}

/*
 *  Flash keyboard LEDs
 */
function led_flash() %{
#define I8042_DATA_REG          0x60
#define I8042_STATUS_REG        0x64

	int i;
	int val = 0;

	for (i=0;i<10;i++) {
		val ^= 7;

		while (inb(I8042_STATUS_REG) & 0x2)
			;

		outb(0x00, 0x80);
		outb(0xed, I8042_DATA_REG);
		while (inb(I8042_STATUS_REG) & 0x2)
			;
		outb(0x00, 0x80);
		outb(val, I8042_DATA_REG);

		mdelay(200);
	}
%}

/*
 *  Beep at freq Hz.
 */
function beep(freq: long, delay: long) %{
	pcspkr_tone_nsec(THIS->freq, THIS->delay * 1000000);
%}

/*
 *  Dirty reboot via ICH
 */
function ich_reboot() %{
	outb(0x2, 0xcf9);
	outb(0x00, 0x80);
	outb(0x4, 0xcf9);
	outb(0x00, 0x80);
	outb(0xe, 0xcf9);
%}

function device_name:string (dev: long) %{
	struct device *dev = (struct device*)(long)THIS->dev;

	strlcpy(THIS->__retvalue, dev_name(dev), MAXSTRINGLEN);
%}

function device_driver_name:string (dev: long) %{
	struct device *dev = (struct device*)(long)THIS->dev;

	strlcpy(THIS->__retvalue, dev_driver_string(dev), MAXSTRINGLEN);
%}

function bfsk_write(msg: string) %{
	char *str = (char*)THIS->msg;
	pcspkr_generate_bfsk(str);
%}

function console_write(msg: string) %{
	char *str = (char*)THIS->msg;

	printk("%s", THIS->msg);
%}

function WriteTrace(msg: string) {
	if (minimodem & 1)
		bfsk_write(msg)
	printf("PM-TRACE: %s", msg)
	console_write(msg)
}

function WriteInfo(msg: string) {
	if (minimodem)
		bfsk_write(msg)
	printf("PM-INFO: %s", msg)
	console_write(msg)
}

function WriteTest(msg: string) {
	if (minimodem & 8)
		bfsk_write(msg)
	printf("\nPM-TEST: %s\n", msg)
	console_write(msg)
}

function WriteDebug(msg: string) {
	if (minimodem)
		bfsk_write(msg)
	printf("PM-DEBUG: %s", msg)
	console_write(msg)
}

function WriteTaskDebug(msg: string) {
	if (minimodem & 4)
		bfsk_write(msg)
	printf("PM-TASK-DEBUG: %s", msg)
	console_write(msg)
}

function WriteDeviceDebug(msg: string) {
	if (minimodem & 2)
		bfsk_write(msg)
	printf("PM-DEV-DEBUG: %s", msg)
	console_write(msg)
}

function rtc_save_restore(save: long) %{

        static struct rtc_time time;
	
	if ((long)THIS->save)
		get_rtc_time(&time);
	else
        	set_rtc_time(&time);
%}

function hash_symbol(symbol: string) %{
	const char *s;
	const char *str = (char*)THIS->symbol;
	unsigned long g,h = 0;

	/* Hash PJW, Dragon book, Aho, Sethi, Ullman */
	for (s = str; *s; s++) {
		h = (h<<4) + *s;
		g = h & 0xf0000000;
		if (g) {
			h ^= (g>>24);
			h ^= g;
		}
	}
	
	save_hash_in_RTC(h);
%}

function hash_dev_func(dev: long, suspend: long) %{
	struct device *dev = (struct device *)(long)THIS->dev;
	unsigned long suspend = THIS->suspend;
	unsigned long addr = 0;

	if (suspend) {
		if (dev->class) {
			if (dev->class->pm) 
				addr = (unsigned long)dev->class->pm->suspend;
			else
				addr = (unsigned long)dev->class->suspend;
		}

		if (dev->type)
			if (dev->type->pm)
				addr = (unsigned long)dev->type->pm->suspend;

		if (dev->bus) {
			if (dev->bus->pm)
				addr = (unsigned long)dev->bus->pm->suspend;
			else
				addr = (unsigned long)dev->bus->suspend;
		}
	} else {
		if (dev->class) {
			if (dev->class->pm) 
				addr = (unsigned long)dev->class->pm->resume;
			else
				addr = (unsigned long)dev->class->resume;
		}

		if (dev->type)
			if (dev->type->pm)
				addr = (unsigned long)dev->type->pm->resume;

		if (dev->bus) {
			if (dev->bus->pm)
				addr = (unsigned long)dev->bus->pm->resume;
			else
				addr = (unsigned long)dev->bus->resume;
		}
	}

	save_hash_in_RTC(addr);
%}

probe kernel.function("__device_suspend@drivers/base/power/main.c") {
	/* We are going to call pm_op() on the device which calls the relevant suspend
	   callback so hash this function to catch it if it locks up */
	hash_dev_func($dev, 1)
}

probe kernel.function("__thaw_process@kernel/freezer.c") {
	s = sprintf("thawing task \"%s\"\n", kernel_string($p->comm))
	WriteTaskDebug(s)
	tasks_thawed[$p->pid] = 1
}

probe begin {
	handle_args()

	rtc_save_restore(1)
	s = sprintf("Ready to run S3 test\n")
	WriteInfo(s)

	if (parent_pid != 0)
		signal_proc(parent_pid)
}

probe end {
	rtc_save_restore(0)

	frozen_count = 0
	foreach (task in tasks_frozen)
		frozen_count++

	thawed_count = 0
	foreach (task in tasks_thawed)
		thawed_count++

	foreach (func in funcs_entered)
		entered_count++

	foreach (func in funcs_returned)
		returned_count++

	s = sprintf("%d functions entered, %d functions returned.\n",
		entered_count, returned_count)
	WriteInfo(s)
	
	s = sprintf("%d tasks frozen and %d tasks thawed.\n", frozen_count, thawed_count)
	WriteInfo(s)

	foreach (frozen in tasks_frozen)
		if (!([frozen] in tasks_thawed)) {
			s = sprintf("Task pid:%d '%s' was frozen but NOT thawed.\n", 
				frozen, tasks_frozen_names[frozen])
			WriteTest(s)
	}
	s = sprintf("S3 test completed.\n")
	WriteInfo(s)
}

function trace_in(str: string)
{
	f = probefunc()
	hash_symbol(f)

	if (f == reboot_funcname)
		ich_reboot()
	if (f == ledflash_funcname)
		led_flash()
	if (f == beep_funcname) {
		beep(880,200)
		beep(440,200)
		beep(0,0)
	}

	funcs_entered[f] = 1
	if (str == "")
		s = sprintf("-> %s()\n", f)
	else
		s = sprintf("-> %s() %s\n", f, str)
	WriteTrace(s)
}

function trace_out(ret: string)
{
	f = probefunc()

	if (f == reboot_funcname)
		ich_reboot()
	if (f == ledflash_funcname)
		led_flash()
	if (f == beep_funcname) {
		beep(440,200)
		beep(880,200)
		beep(0,0)
	}
	funcs_returned[f] = 1
	if (ret == "") 
		s = sprintf("<- %s()\n", f)
	else
		s = sprintf("<- %s() %s\n", f, ret)
	WriteTrace(s)
}

/* Bad places to be tracing: */
probe kernel.function("panic@kernel/panic.c"),
      kernel.function("oops_enter@kernel/panic.c"),
      kernel.function("__stack_chk_fail@kernel/panic.c")
{
	trace_in("")
}

probe kernel.function("suspend_valid_only_mem@kernel/power/suspend.c"),
      kernel.function("suspend_prepare@kernel/power/suspend.c"),
      kernel.function("suspend_enter@kernel/power/suspend.c"),
      kernel.function("suspend_devices_and_enter@kernel/power/suspend.c"),
      kernel.function("suspend_finish@kernel/power/suspend.c"),
      kernel.function("enter_state@kernel/power/suspend.c"),
      kernel.function("pm_suspend@kernel/power/suspend.c")
{
	trace_in("")
}

/* Would like to debug this, but it's inlined! */
/* 
probe kernel.function("suspend_prepare@kernel/power/suspend.c").return {
	trace_out($$return)

	if (errno_str($return) == "EPERM") {
		s = sprintf("suspend_prepare(): suspend_ops() or suspend_ops->enter() were not defined and caused a suspend failure.\n")
		WriteTest(s)
	} else if ($return != 0) {
		s = sprintf("pm_notifier_call_chain(), usermodehelper_disable() or suspend_freeze_processes() failed causing suspend_prepare() to fail.\n")
		WriteTest(s)
	}
}
*/

/* Trace pm_notifier_call_chain as it can cause suspend_prepare() to fail */
probe kernel.function("pm_notifier_call_chain@kernel/power/main.c") {
	trace_in("")
}

probe kernel.function("pm_notifier_call_chain@kernel/power/main.c").return {
	trace_out($$return)

	if (errno_str($return) == "EINVAL") {
		s = sprintf("pm_notifier_call_chain() failed on a bad notifier call chain.\n")
		WriteTest(s)
	}
}

/* Trace usermodhelper_disable as it can cause suspend_prepare() to fail */
probe kernel.function("usermodehelper_disable@kernel/kmod.c") {
	trace_in("")
}

probe kernel.function("usermodehelper_disable@kernel/kmod.c").return {
	trace_out($$return)

	if (errno_str($return) == "EAGAIN") {
		s = sprintf("usermodehelper_disable() running helpers did not reduce to zero in 5 seconds.\n")
		WriteTest(s)
	}
}


probe kernel.function("state_store@kernel/power/main.c") {
	trace_in("")

	s = sprintf("/sys/power/state = \"%s\"\n", kernel_string($buf))
	WriteDebug(s)

	if (kernel_string($buf) != "mem") {
		s = sprintf("state_store(): /sys/power/state did not get 'mem' string to initiate suspend, got %s instead.\n", kernel_string($buf))
		WriteTest(s)
	}
}

probe kernel.function("state_store@kernel/power/main.c").return {
	trace_out($$return)
	if ($return != 3) {
		s = sprintf("state_store(): Expecting a return value of 3, got %d instead.\n", $return)
		WriteTest(s)
	}
	exit()
}

probe kernel.function("disable_nonboot_cpus@kernel/cpu.c") {
	trace_in("")
}

probe kernel.function("disable_nonboot_cpus@kernel/cpu.c").return {
	trace_out($$return)
	if ($return != 0) {
		s = sprintf("disable_nonboot_cpus(): CPU(s) could not be disabled.\n")
		WriteTest(s)
	}
}

%( kernel_v > "2.6.38" %?
probe kernel.function("syscore_suspend@drivers/base/syscore.c") {
	trace_in("")
}

probe kernel.function("syscore_suspend@drivers/base/syscore.c").return {
	trace_out($$return)
	if ($return != 0) {
		s = sprintf("syscore_suspend(): could not suspend all the system core.\n")
		WriteTest(s)
	}
}
%)

probe kernel.function("suspend_valid_only_mem@kernel/power/suspend.c").return {
	trace_out($$return)
}

probe kernel.function("suspend_enter@kernel/power/suspend.c").return {
	trace_out($$return)
	if ($return != 0) {
		s = sprintf("suspend_enter(): failed to enter the desired system sleep state.\n")
		WriteTest(s)
	}
}

probe kernel.function("suspend_devices_and_enter@kernel/power/suspend.c").return {
	trace_out($$return)
	if ($return != 0) {
		s = sprintf("suspend_devices_and_enter(): failed to suspend devices and enter the desired system sleep state.\n")
		WriteTest(s)
	}
}

/* inlined so cannot trace
probe kernel.function("suspend_finish@kernel/power/suspend.c").return {
	trace_out($$return)
}
*/

probe kernel.function("enter_state@kernel/power/suspend.c").return {
	trace_out($$return)
	if (errno_str($return) == "ENODEV") {
		s = sprintf("enter_state(): failed because valid_state() returned -ENODEV. There probably isn't support for entering the specific S state.\n")
		WriteTest(s)
	} else if (errno_str($return) == "EBUSY") {
		s = sprintf("enter_state(): failed because it could not get hold of the pm_mutex.\n")
		WriteTest(s)
	} else if ($return != 0) {
		s = sprintf("enter_state(): failed because either suspend_prepare() or suspend_devices_and_enter() failed.\n")
		WriteTest(s)
	}
}

probe kernel.function("pm_suspend@kernel/power/suspend.c").return {
	trace_out($$return)
	if (errno_str($return) == "EINVAL") {
		s = sprintf("pm_suspend(): failed because the state argument was wrong, was %d should be > PM_SUSPEND_ON and < PM_SUSPEND_MAX.\n", $state)
		WriteTest(s)
	} else if ($return != 0) {
		s = sprintf("pm_suspend(): failed because enter_state() failed.\n")
		WriteTest(s)
	}
}

/* 
 *  kernel/power/suspend_test.c tests 
 *  	used for suspend testing, so trace enter/exit points but
 *	don't care about failure returns
 */
probe kernel.function("*@kernel/power/suspend_test.c") {
	trace_in("")
}

probe kernel.function("*@kernel/power/suspend_test.c").return {
	trace_out($$return)
}

/* ---------------------------------------------------- */

/*
 *   drivers/acpi/nvs tests
 */
probe kernel.function("*@drivers/acpi/nvs.c") {
	trace_in("")
}

probe kernel.function("suspend_nvs_register@drivers/acpi/nvs.c").return, 
      kernel.function("suspend_nvs_alloc@drivers/acpi/nvs.c").return,
      kernel.function("suspend_nvs_save@drivers/acpi/nvs.c").return {
	trace_out($$return)
	if (errno_str($return) == "ENOMEM") {
		s = sprintf("%s could not register a NVS region.\n", probefunc())
		WriteTest(s)
	} else if ($return != 0) {
		s = sprintf("%s failed for some unknown reason.\n", probefunc())
		WriteTest(s)
	}
}

probe kernel.function("suspend_nvs_free@drivers/acpi/nvs.c").return,
      kernel.function("suspend_nvs_restore@drivers/acpi/nvs.c").return {
	trace_out($$return)
}


/* ---------------------------------------------------- */

/* 
 *  kernel/power/process.c tests 
 */
probe kernel.function("*@kernel/power/process.c")
{
	trace_in("")
}

probe kernel.function("thaw_tasks@kernel/power/process.c").return,
      kernel.function("thaw_processes@kernel/power/process.c").return {
	trace_out($$return)
}

/*
 *  test task freezing 
 */
probe kernel.function("try_to_freeze_tasks@kernel/power/process.c").return {
	trace_out($$return)
	if (errno_str($return) == "EBUSY") {
		if ($sig_only == 0) {
			s = sprintf("try_to_freeze_tasks(): could not freeze all the userspace tasks and was left with some unfreezable tasks.\n")
			WriteTest(s)
		} else {
			s = sprintf("try_to_freeze_tasks(): could not freeze all the remaining non-userspace tasks and was left with some unfreezable tasks.\n")
			WriteTest(s)
		}
	}
}

/*
 *  test freeze_processes 
 */
probe kernel.function("freeze_processes@kernel/power/process.c").return {
	trace_out($$return)

	frozen_count = 0
	foreach (task in tasks_frozen)
		frozen_count++

	if (errno_str($return) == "EBUSY") {
		s = sprintf("freeze_processes(): could not freeze all the tasks.\n")
		WriteTest(s)
	} else if ($return != 0) {
		s = sprintf("freeze_processes(): failed for some unknown reason.\n")
		WriteTest(s)
	} else {
		s = sprintf("%d tasks frozen successfully.\n", frozen_count)
		WriteTest(s)
	}
}

/* ---------------------------------------------------- */

probe kernel.function("*@kernel/power/user.c") {
	trace_in("")
}

probe kernel.function("*@kernel/power/user.c").return {
	trace_out($$return)
}

/* ---------------------------------------------------- */

probe kernel.function("freeze_task@kernel/freezer.c") {
	s = sprintf("freezing task \"%s\"\n", kernel_string($p->comm))
	WriteTaskDebug(s)
	tasks_frozen[$p->pid] = 1
	tasks_frozen_names[$p->pid] = kernel_string($p->comm)
}

/*
probe kernel.function("__thaw_process@kernel/freezer.c") {
	//s = sprintf("thawing task \"%s\"\n", kernel_string($p->comm))
	//WriteInfo(s)
}	
*/

/* ---------------------------------------------------- */

/*
 * Interesting funcs in drivers/acpi/sleep 
 */
probe kernel.function("acpi_sleep_tts_switch@drivers/acpi/sleep.c"),
      kernel.function("tts_notify_reboot@drivers/acpi/sleep.c"),
      kernel.function("acpi_sleep_prepare@drivers/acpi/sleep.c"),
      kernel.function("acpi_pm_freeze@drivers/acpi/sleep.c"),
      kernel.function("acpi_pm_pre_suspend@drivers/acpi/sleep.c"),
      kernel.function("acpi_pm_prepare@drivers/acpi/sleep.c"),
      kernel.function("acpi_pm_finish@drivers/acpi/sleep.c"),
      kernel.function("acpi_pm_end@drivers/acpi/sleep.c"),
      kernel.function("acpi_suspend_begin@drivers/acpi/sleep.c"),
      kernel.function("acpi_suspend_enter@drivers/acpi/sleep.c"),
      kernel.function("acpi_suspend_begin_old@drivers/acpi/sleep.c"),
      kernel.function("acpi_pm_thaw@drivers/acpi/sleep.c"),
      kernel.function("acpi_suspend@drivers/acpi/sleep.c"),
      kernel.function("acpi_power_off_prepare@drivers/acpi/sleep.c"),
      kernel.function("acpi_power_off@drivers/acpi/sleep.c")
{
	trace_in("")
}

/* Following are in-lined, so cannot be traced :-( 
 *
 *    "acpi_nvs_nosave@drivers/acpi/sleep.c"
 *    "__acpi_pm_prepare@drivers/acpi/sleep.c")
 */

probe kernel.function("acpi_sleep_prepare@drivers/acpi/sleep.c").return {
	trace_out($$return)
	if ($return != 0) {
		s = sprintf("acpi_sleep_prepare(): failed - this can only occur because the\nacpi_wakeup_address was not set. Without this, resume cannot work because it needs some\ncontext to resume from.\n")
		WriteTest(s)
	}
}

probe kernel.function("acpi_pm_prepare@drivers/acpi/sleep.c").return {
	trace_out($$return)
	if ($return != 0) {
		s = sprintf("acpi_pm_pre_suspend(: failed probably because suspend_nvs_save() fails.\nThe system could not save to the ACPI NVSregion, normally because of a iomapping\nfailure (out of memory).\n")
		WriteTest(s)
	}
}

probe kernel.function("acpi_suspend_begin@drivers/acpi/sleep.c").return {
	trace_out($$return)
	if (errno_str($return) == "ENOSYS") {
		s = sprintf("acpi_suspend_begin() failed - ACPI does not support state %d.\n", $pm_state)
		WriteTest(s)
	} else if (errno_str($return) == "ENOMEM") {
		s = sprintf("acpi_suspend_begin() failed - because suspend_nvs_alloc() could not\nallocate a NVS region.\n")
		WriteTest(s)
	} else if ($return != 0) {
		s = sprintf("acpi_suspend_begin() failed for some unknown reason.\n")
		WriteTest(s)
	}
}
	
probe kernel.function("acpi_suspend_enter@drivers/acpi/sleep.c").return {
	trace_out($$return)
	if (errno_str($return) == "EINVAL") {
		s = sprintf("acpi_suspend_enter(): failed because acpi_suspend_lowlevel() detected a\nwakeup header that did not match the correct wakeup header signature.\n")
		WriteTest(s)
	} else if (errno_str($return) == "EFAULT") {
		s = sprintf("acpi_suspend_enter(): failed because acpi_enter_sleep_state() count not\nenter into the chosen sleep state. This is could be a H/W issue on the southbridge.\n")
		WriteTest(s)
	} else if ($return != 0) {
		s = sprintf("acpi_suspend_enter(): failed for some unknown reason.\n")
		WriteTest(s)
	}
}

/*
skip
probe kernel.function("acpi_suspend_state_valid@drivers/acpi/sleep.c").return {
	trace_out($$return)
	if ($return == 0) {
		s = sprintf("acpi_suspend_enter(): function was passed a bad PM state: %d\n", $pm_state)
		WriteTest(s)
	}
}
*/

probe kernel.function("acpi_suspend_begin_old@drivers/acpi/sleep.c").return {
	trace_out($$return)
	if ($return !=0) {
		s = sprintf("acpi_suspend_begin_old(): failed because acpi_suspend_begin() or __acpi_pm_prepare() failed.")
		WriteTest(s)
	}
}

probe kernel.function("acpi_suspend@drivers/acpi/sleep.c").return {
	trace_out($$return)
	if (errno_str($return) == "EINVAL") {
		s = sprintf("acpi_suspend(): failed because it was given an invalid ACPI state: %d.\n", $acpi_state)
		WriteTest(s)
	} else if ($return !=0) {
		s = sprintf("acpi_suspend(): failed because pm_suspend() failed.")
		WriteTest(s)
	}
}

probe kernel.function("acpi_sleep_tts_switch@drivers/acpi/sleep.c").return,
      kernel.function("tts_notify_reboot@drivers/acpi/sleep.c").return,
      kernel.function("acpi_pm_freeze@drivers/acpi/sleep.c").return,
      kernel.function("acpi_pm_pre_suspend@drivers/acpi/sleep.c").return,
      kernel.function("acpi_pm_finish@drivers/acpi/sleep.c").return,
      kernel.function("acpi_pm_end@drivers/acpi/sleep.c").return,
      kernel.function("acpi_pm_thaw@drivers/acpi/sleep.c").return,
      kernel.function("acpi_power_off_prepare@drivers/acpi/sleep.c").return,
      kernel.function("acpi_power_off@drivers/acpi/sleep.c").return
{
	trace_out($$return)
}

/* ---------------------------------------------------- */

/*
 *  drivers/acpi/wakeup.c
 *	nothing special to debug
 */
probe kernel.function("*@drivers/acpi/wakeup.c") {
	trace_in("")
}

probe kernel.function("*@drivers/acpi/wakeup.c").return {
	trace_out($$return)
}

/* ---------------------------------------------------- */

/*
 *  drivers/acpi/acpica/hwsleep.c
 *	TODO - check all ACPI return states :-(
 */
probe kernel.function("*@drivers/acpi/acpica/hwsleep.c") {
	trace_in("")
}

/*
TODO: These cause breakage  - can we select the appropriate funcs that don't
probe kernel.function("*@drivers/acpi/acpica/hwsleep.c").return {
	trace_out($$return)
}
*/

/*
 *  suspend_console@kernel/printk.c
 *	just to see when we suspend/resume the consoles
 */
probe kernel.function("suspend_console@kernel/printk.c"),
      kernel.function("resume_console@kernel/printk.c") {
	trace_in("")
}

probe kernel.function("suspend_console@kernel/printk.c").return,
      kernel.function("resume_console@kernel/printk.c").return {
	trace_out($$return)
}

/* ---------------------------------------------------- */

probe kernel.function("pm_noirq_op@drivers/base/power/main.c"),
      kernel.function("device_resume_noirq@drivers/base/power/main.c"),
      kernel.function("legacy_resume@drivers/base/power/main.c"),
      kernel.function("async_resume@drivers/base/power/main.c"),
      kernel.function("device_complete@drivers/base/power/main.c"),
      kernel.function("dpm_resume_end@drivers/base/power/main.c"),  
      kernel.function("device_suspend_noirq@drivers/base/power/main.c"),
      kernel.function("async_suspend@drivers/base/power/main.c"), 
      kernel.function("dpm_resume_noirq@drivers/base/power/main.c"),
      kernel.function("dpm_resume@drivers/base/power/main.c"),
      kernel.function("dpm_complete@drivers/base/power/main.c"),/* */
      kernel.function("dpm_suspend_noirq@drivers/base/power/main.c"), 
      kernel.function("dpm_suspend@drivers/base/power/main.c"),
      kernel.function("dpm_prepare@drivers/base/power/main.c"),
      kernel.function("dpm_suspend_start@drivers/base/power/main.c"),
      kernel.function("device_pm_wait_for_dev@drivers/base/power/main.c") {
	trace_in("")
}


probe kernel.function("dpm_resume_noirq@drivers/base/power/main.c").return,
      kernel.function("dpm_resume@drivers/base/power/main.c").return,
%( kernel_v > "2.6.38" %?
      /* inlined, on some versions, this is a hack */
      kernel.function("dpm_complete@drivers/base/power/main.c").return,
%)
      kernel.function("dpm_resume_end@drivers/base/power/main.c").return,
      kernel.function("async_resume@drivers/base/power/main.c").return,
      kernel.function("legacy_suspend@drivers/base/power/main.c").return,
      kernel.function("device_complete@drivers/base/power/main.c").return,
      kernel.function("device_pm_wait_for_dev@drivers/base/power/main.c").return {
	trace_out($$return)
}

probe kernel.function("device_prepare@drivers/base/power/main.c"),
      kernel.function("legacy_suspend@drivers/base/power/main.c") {
	trace_in(s)
	s = sprintf("dev: %s (%s)\n", device_name($dev), device_driver_name($dev))
	WriteDeviceDebug(s)
}

probe kernel.function("async_suspend@drivers/base/power/main.c") {
	trace_in(s)
	s = sprintf("device: %s (%s)\n", device_name($data), device_driver_name($data))
	WriteDeviceDebug(s)
}

probe kernel.function("async_suspend@drivers/base/power/main.c").return {
	trace_out("")
	
}

probe kernel.function("pm_noirq_op@drivers/base/power/main.c").return {
	trace_out($$return)
	if ($return != 0) {
		s = sprintf("pm_noirq_op(): failed to change a power state on device %s (%s).\n", device_name($dev), device_driver_name($dev))
		WriteTest(s)
	}
}

probe kernel.function("device_resume_noirq@drivers/base/power/main.c").return {
	trace_out($$return)
	if ($return != 0) {
		s = sprintf("device_resume_noirq(): failed to change a power state on device %s (%s).\n", device_name($dev), device_driver_name($dev))
		WriteTest(s)
	}
}

probe kernel.function("device_suspend_noirq@drivers/base/power/main.c").return {
	trace_out($$return)
	if ($return != 0) {
		s = sprintf("device_suspend_noirq(): failed to change a power state on device %s (%s).\n", device_name($dev), device_driver_name($dev))
		WriteTest(s)
	}
}

probe kernel.function("dpm_suspend_noirq@drivers/base/power/main.c").return {
	trace_out($$return)
	if ($return != 0) {
		s = sprintf("dpm_suspend_noirq(): failed change a power state on a device.\n")
		WriteTest(s)
	}
}

probe kernel.function("legacy_suspend@drivers/base/power/main.c").return {
	trace_out($$return)
	if ($return != 0) {
		s = sprintf("legacy_suspend(): failed to change a power state on device %s (%s).\n", device_name($dev), device_driver_name($dev))
		WriteTest(s)
	}
}

probe kernel.function("dpm_suspend@drivers/base/power/main.c").return {
	trace_out($$return)

	if ($return != 0) {
		s = sprintf("dpm_suspend(): failed to suspend all devices.\n")
		WriteTest(s)
	}

	dev_ok = 0
	dev_fail = 0

	foreach (dev in devices_suspended)
		if (devices_suspended[dev] == 1)
			dev_ok++;
		else
			dev_fail++

	if (dev_fail == 0)
		s = sprintf("%d devices suspended correctly.\n", dev_ok)
	else
		s = sprintf("%d of %d devices failed to suspend.\n", dev_fail, dev_ok)
	WriteTest(s)

	if (dev_fail > 0) {
		devs = ""
		foreach (dev in devices_suspended)
			if (devices_suspended[dev] == 0) 
				devs = " " . dev

		s = sprintf("Devices that failed to suspend: %s.\n", devs)
		WriteInfo(s)
	}
}

probe kernel.function("device_prepare@drivers/base/power/main.c").return {
	trace_out($$return)
	if ($return != 0) {
		s = sprintf("device_prepare(): failed to prepare a device for a system power transition: device %s (%s).\n", device_name($dev), device_driver_name($dev))
		WriteTest(s)
	}
}

probe kernel.function("legacy_resume@drivers/base/power/main.c").return {
	trace_out($$return)
	if ($return != 0) {
		s = sprintf("legacy_resume(): failed to resume device %s (%s).\n", device_name($dev), device_driver_name($dev))
		WriteTest(s)
	}
}

probe kernel.function("device_resume@drivers/base/power/main.c") {
	s = sprintf("resuming device %s (%s)\n",
		device_name($dev), device_driver_name($dev))
	WriteDeviceDebug(s)
	hash_dev_func($dev, 0)
	saved_device_name = device_name($dev)
	saved_device_driver_name = device_driver_name($dev)
	
}

probe kernel.function("device_resume@drivers/base/power/main.c").return {
	trace_out($$return)
	if ($return == 0) {
		devices_resumed[device_name($dev)] = 1;
	} else {
		devices_resumed[device_name($dev)] = 0;
		s = sprintf("device_resume(): failed to resumed device %s (%s): %s\n",
			device_name($dev), device_driver_name($dev), $$return)
		WriteTest(s)
	}
}

probe kernel.function("dpm_resume@drivers/base/power/main.c").return {
	trace_out($$return)

	dev_ok = 0
	dev_fail = 0

	foreach (dev in devices_resumed) {
		if (devices_resumed[dev] == 1)
			dev_ok++;
		else
			dev_fail++
	}

	if (dev_fail == 0)
		s = sprintf("%d devices resumed correctly.\n", dev_ok)
	else
		s = sprintf("%d of %d devices failed to resume.\n", dev_fail, dev_ok)
	WriteTest(s)

	if (dev_fail > 0) {
		devs = ""
		foreach (dev in devices_resumed)
			if (devices_resumed[dev] == 0) 
				devs = " " . dev

		s = sprintf("Devices that failed to resume: %s.\n", devs)
		WriteInfo(s)
	}

	foreach (dev in devices_resumed) {
		if (!(dev in devices_suspended)) {
			s = sprintf("dpm_resume(): device %s was suspended but not resumed for some reason.\n", dev)
			WriteTest(s)
		}
	}
}

probe kernel.function("dpm_suspend_start@drivers/base/power/main.c").return {
	trace_out($$return)
	if ($return != 0) {
		s = sprintf("dpm_suspend_start(): dpm_prepare() or dom_suspend() failed, cannot prepare devices for PM transistion and suspend.\n")
		WriteTest(s)
	}
}

probe kernel.function("dpm_prepare@drivers/base/power/main.c").return {
	trace_out($$return)
	if ($return != 0) {
		s = sprintf("dpm_prepare(): failed to prepare a device for a power transision. See kernel log for more info on the device.\n")
		WriteTest(s)
	}
}

probe kernel.function("device_suspend@drivers/base/power/main.c") {
	s = sprintf("suspend dev: %s (%s)\n", 
		device_name($dev), device_driver_name($dev))
	WriteDeviceDebug(s)
	saved_device_name = device_name($dev)
	saved_device_driver_name = device_driver_name($dev)
}

probe kernel.function("__device_suspend@drivers/base/power/main.c").return {
	if ($return == 0) {
		devices_suspended[device_name($dev)] = 1;
	} else {
		devices_suspended[device_name($dev)] = 0;
		s = sprintf("__device_suspend(): device %s (%s) failed to suspend.\n", 
			saved_device_name, saved_device_driver_name)
		WriteTest(s)
	}
}

%( kernel_v > "2.6.38" %?
probe kernel.function("acpi_suspend_lowlevel@arch/x86/kernel/acpi/sleep.c") {
	trace_in("")
	s = sprintf("Jumping to do_suspend_lowlevel to save processor state.\n")
	WriteInfo(s)
}

probe kernel.function("acpi_suspend_lowlevel@arch/x86/kernel/acpi/sleep.c").return {
	trace_out($$return)
	s = sprintf("Returning from suspend.\n")
	WriteInfo(s)
	s = sprintf("Resumed. Assuming BIOS -> kernel transsition works correctly.\n")
	WriteTest(s)
}
%)

probe kernel.function("acpi_enter_sleep_state@drivers/acpi/acpica/hwsleep.c") {
	trace_in("")
	s = sprintf("Going into sleep state %d.\n", $sleep_state)
	WriteInfo(s)
}

probe kernel.function("acpi_hw_write_pm1_control@drivers/acpi/acpica/hwregs.c") {
	trace_in("")
	s = sprintf("pm1a_control = %x, pm1b_control = %x\n",
		$pm1a_control, $pm1b_control)
	WriteDebug(s)
}
