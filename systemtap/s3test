#!/usr/bin/python

#
# Copyright (C) 2011 Canonical
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#

#
# TODO:
#	Intelligent diagnosis from function trace log
#

import getopt, sys, os
import commands
import signal
import subprocess
import errno
import shutil
import select

reboot_func = "#"
flash_func  = "#"
beep_func   = "#"
my_pid = os.getpid()
auto_s3	= False
minimodem = 0
baud = ""

pmdebug_path = "/usr/share/pmdebug-tools/"

def usage():
	print sys.argv[0] + " [-r func|--reboot=func] [-f func|--flash=func] [-b func |--beep=func] [-s|--suspend]"

try:
	opts, args = getopt.getopt(sys.argv[1:], "r:f:b:sm", [ "help", "reboot", "flash=", "beep=", "suspend", "minimodem", "minimodem-funcs", "minimodem-devs", "minimodem-tasks", "minimodem-tests", "minimodem-baud=" ])
except getopt.GetoptError, err:
	print str(err)
	usage()
	sys.exit(2)

#
# s3.stp sends us a SIGUSR1 to indicate it is ready to run
#
def sighandler(signum, frame):
	if signum == signal.SIGUSR1:
		if auto_s3:
			print "Suspending machine.."
			os.system("pm-suspend")
		else:
			print "Now suspend the machine."
			print "Please wake machine up manually."

if os.getuid() != 0:
	print "You need to run this script with root privileges."
	sys.exit(2)
		
for opt, optarg in opts:
	if opt in ("--help"):
		usage()
		sys.exit(2)
	elif opt in ("-r", "--reboot"):
		reboot_func = optarg
	elif opt in ("-f", "--flash"):
		flash_func = optarg
	elif opt in ("-b", "--beep"):
		beep_func = optarg
	elif opt in ("-s", "--suspend"):
		auto_s3 = True
	elif opt in ("-m", "--minimodem"):
		minimodem = 1024
	elif opt in ("--minimodem-funcs"):
		minimodem = minimodem | 1
	elif opt in ("--minimodem-devs"):
		minimodem = minimodem | 2
	elif opt in ("--minimodem-tasks"):
		minimodem = minimodem | 4
	elif opt in ("--minimodem-tests"):
		minimodem = minimodem | 8
	elif opt in ("--minimodem-baud"):
		baud = optarg
		print "Baud: " + baud
		if not int(baud) in (110, 300, 600, 1200):
			print "Baud rates must be 110, 300, 600 or 1200"
			sys.exit(2)
	else:
		print "Unknown option " + opt
		usage()


shutil.copyfile("/proc/kallsyms", "kallsyms.log")

#
#  Go build systemtap debug and run
#
print "Building systemtap debugger (this may take some time).."
print "If the machine hangs, reboot and run 'locatehang'."

if os.path.exists("s3.stp"):
	s3stp = "s3.stp"
else:
	s3stp = pmdebug_path + "s3.stp"

#
#  Filter output from systemtap script to various logs
#
full_log   = open('s3-systemtap.log', 'w')
trace_log  = open('s3-trace.log', 'w')
test_log   = open('s3-test.log', 'w')
device_log = open('s3-devices.log', 'w')
task_log   = open('s3-tasks.log', 'w')
stderr_log = open('s3-error.log', 'w')

signal.signal(signal.SIGUSR1, sighandler)
cmd = [ "stap", "-g", "-DSTP_NO_OVERLOAD", s3stp, str(my_pid), reboot_func, flash_func, beep_func, str(minimodem), baud ]
proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

errors = False
stderr_open = True
stdout_open = True
while stderr_open or stdout_open:
	try:
		readable, writeable, exceptional = select.select([proc.stderr.fileno(), proc.stdout.fileno()], [], [])	
		for i in readable:
			if i == proc.stderr.fileno():
				line = proc.stderr.readline()
				if line == "":
					stderr_open = False
				else:
					stderr_log.write(line)
					if line.find("error:") <> -1:
						errors = True

			if i == proc.stdout.fileno():
				line = proc.stdout.readline()
				if line == "":
					stdout_open = False
	
				if not line:
					break
				if line.find("PM-INFO:",0) == 0:
					print line,
				if line.find("PM-TEST:",0) == 0:
					print line,
					test_log.write(line)
				if line.find("PM-TRACE:",0) == 0:
					#
					#  need to plug in a function trace
					#  back end to figure out when things
					#  fail and provide diagnosis
					#
					trace_log.write(line)
				if line.find("PM-DEV-DEBUG:",0) == 0:
					device_log.write(line)
				if line.find("PM-TASK-DEBUG:",0) == 0:
					task_log.write(line)
				full_log.write(line)	
	#
	# SIGUSR1 causes EAGAIN, so don't raise
	#
	except select.error, x:		
		if x[0] != errno.EINTR:
			raise
	except IOError, x:
		if x.errno != errno.EAGAIN:
			raise

proc.wait()

full_log.close()
trace_log.close()
test_log.close()
device_log.close()
task_log.close()
stderr_log.close()

if errors:
	print '\nError:'
	print '  SystemTap failed to execute. This could be because the kernel debug .ddeb'
	print '  has not been installed or the kernel functions being traced have '
	print '  changed in this kernel version.  Check s3-error.log for more information.\n'
	print 'If you need to install the kernel .ddeb package do the following:\n'
	print '  echo "deb http://ddebs.ubuntu.com $(lsb_release -cs) main restricted universe multiverse | sudo tee -a /etc/apt/sources.list.d/ddebs.list'
	print '  sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 428D7C01'
	print '  sudo apt-get install linux-image-`uname -r`-dbgsym'
	sys.exit(3)
		

print "Note:"
print "  SystemTap error log in s3-errors.log"
print "  Full trace log in s3-systemtap.log"
print "  Function trace log in s3-trace.log"
print "  Device state log in s3-devices.log"
print "  Task state log in s3-tasks.log"
print "  Test results in s3-test.log"
print ""
